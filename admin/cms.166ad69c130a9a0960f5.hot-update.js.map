{"version":3,"file":"cms.166ad69c130a9a0960f5.hot-update.js","sources":["webpack:///./node_modules/netlify-cms-core/dist/esm/valueObjects/AssetProxy.js","webpack:///./src/cms/CKEditorWidget.js","webpack:///./src/cms/UploadAdapter.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAssetProxy = createAssetProxy;\nexports.default = void 0;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass AssetProxy {\n  constructor({\n    url,\n    file,\n    path,\n    field\n  }) {\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"fileObj\", void 0);\n\n    _defineProperty(this, \"path\", void 0);\n\n    _defineProperty(this, \"field\", void 0);\n\n    this.url = url ? url : window.URL.createObjectURL(file);\n    this.fileObj = file;\n    this.path = path;\n    this.field = field;\n  }\n\n  toString() {\n    return this.url;\n  }\n\n  async toBase64() {\n    const blob = await fetch(this.url).then(response => response.blob());\n    const result = await new Promise(resolve => {\n      const fr = new FileReader();\n\n      fr.onload = readerEvt => {\n        var _readerEvt$target;\n\n        const binaryString = ((_readerEvt$target = readerEvt.target) === null || _readerEvt$target === void 0 ? void 0 : _readerEvt$target.result) || '';\n        resolve(binaryString.toString().split('base64,')[1]);\n      };\n\n      fr.readAsDataURL(blob);\n    });\n    return result;\n  }\n\n}\n\nexports.default = AssetProxy;\n\nfunction createAssetProxy({\n  url,\n  file,\n  path,\n  field\n}) {\n  return new AssetProxy({\n    url,\n    file,\n    path,\n    field\n  });\n}","/* eslint-disable react/prefer-stateless-function */\n/* eslint-disable react/prop-types */\n// eslint-disable-next-line max-classes-per-file\nimport React from 'react';\nimport CKEditor from '@ckeditor/ckeditor5-react';\nimport BallonBlockEditor from '@ckeditor/ckeditor5-build-balloon-block';\nimport { createUploadAdapterPlugin } from './UploadAdapter';\n\nclass CKEditorWidget extends React.Component {\n  controlID = `rich-editor-${Math.random()}`;\n\n  uploadAdapterPlugin = createUploadAdapterPlugin(this.props.onAddAsset);\n\n  render() {\n    const {\n      forID,\n      classNameWrapper,\n      setActiveStyle,\n      setInactiveStyle,\n      value,\n      onChange,\n    } = this.props;\n    return (\n      <div\n        className={classNameWrapper}\n        style={{\n          paddingLeft: 10,\n          paddingRight: 10,\n          minHeight: 200,\n        }}\n      >\n        <CKEditor\n          id={forID}\n          editor={BallonBlockEditor}\n          config={{\n            extraPlugins: [this.uploadAdapterPlugin],\n\n            blockToolbar: [\n              'heading',\n              '|',\n              'alignment',\n              'bulletedList',\n              'numberedList',\n              '|',\n              'indent',\n              'outdent',\n              '|',\n              'imageUpload',\n              'blockQuote',\n              'insertTable',\n              'mediaEmbed',\n              '|',\n              'undo',\n              'redo',\n            ],\n            toolbar: {\n              items: ['bold', 'italic', 'link'],\n            },\n          }}\n          data={value}\n          onChange={(event, editor) => {\n            const data = editor.getData();\n            onChange(data);\n          }}\n          onBlur={() => setInactiveStyle()}\n          onFocus={() => setActiveStyle()}\n          style={{ outline: 'none' }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default CKEditorWidget;\n","import { createAssetProxy } from 'netlify-cms-core/dist/esm/valueObjects/AssetProxy';\n\nclass UploadAdapter {\n  constructor(loader, onAddAsset) {\n    // The file loader instance to use during the upload.\n    this.loader = loader;\n    this.onAddAsset = onAddAsset;\n  }\n\n  // Starts the upload process.\n  upload() {\n    this.loader.file.then((file) => {\n      this.onAddAsset(createAssetProxy({ file }));\n    });\n  }\n\n  // Aborts the upload process.\n  abort() {}\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const createUploadAdapterPlugin = (onAddAsset) => (editor) => {\n  editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {\n    // Configure the URL to the upload script in your back-end here!\n    return new UploadAdapter(loader, onAddAsset);\n  };\n};\n"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;;;;;;;;;;;;;AACA;AAEA;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAEA;AAkBA;AACA;AADA;AArBA;AAyBA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuCA;AACA;;;;;;;;AA/DA;AACA;AAgEA;AAAA;;;;;;;;;;AAjEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAGA;AACA;;;;;;;;AAEA;AACA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;;;;AAnBA;AAmBA;;;;;;;;;;;;;A","sourceRoot":""}